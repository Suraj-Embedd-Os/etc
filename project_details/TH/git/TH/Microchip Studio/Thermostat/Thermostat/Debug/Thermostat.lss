
Thermostat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000003fc  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000042b  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002c8  00000000  00000000  00000439  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000063ab  00000000  00000000  00000701  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000290e  00000000  00000000  00006aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ffa  00000000  00000000  000093ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000478  00000000  00000000  0000a3b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001057  00000000  00000000  0000a82c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006ea  00000000  00000000  0000b883  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000228  00000000  00000000  0000bf6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000362  00000362  000003d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000c198  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.atmel_start_init 00000006  00000356  00000356  000003ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000006  0000035c  0000035c  000003d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.BOD_init 00000004  00000366  00000366  000003da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.CLKCTRL_init 00000004  0000036a  0000036a  000003de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.CPUINT_init 00000004  0000036e  0000036e  000003e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.mcu_init 00000092  000001b6  000001b6  0000022a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.USART_SCRN_initialization 00000032  00000248  00000248  000002bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.USART_WIFI_initialization 00000022  000002ac  000002ac  00000320  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.USART_TEMP_initialization 00000022  000002ce  000002ce  00000342  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.USART_3_initialization 00000032  0000027a  0000027a  000002ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.system_init 000000c2  000000f4  000000f4  00000168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.SLPCTRL_init 00000004  00000372  00000372  000003e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.USART_SCRN_init 00000014  00000306  00000306  0000037a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.USART_WIFI_init 00000014  0000031a  0000031a  0000038e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.USART_TEMP_init 00000014  0000032e  0000032e  000003a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.USART_3_init 00000014  00000342  00000342  000003b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.VREF_0_init 00000004  00000376  00000376  000003ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.WDT_0_init 00000004  0000037a  0000037a  000003ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__dummy_fini 00000002  00000382  00000382  000003f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.__dummy_funcs_on_exit 00000002  00000384  00000384  000003f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__dummy_simulator_exit 00000002  00000386  00000386  000003fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.exit    00000016  000002f0  000002f0  00000364  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text._Exit   00000004  0000037e  0000037e  000003f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
   8:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
   c:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  10:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  14:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  18:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  1c:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  20:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  24:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  28:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  2c:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  30:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  34:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  38:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  3c:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  40:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  44:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  48:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  4c:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  50:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  54:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  58:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  5c:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  60:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  64:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  68:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  6c:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  70:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  74:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  78:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  7c:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  80:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  84:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  88:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  8c:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  90:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  94:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  98:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>
  9c:	0c 94 b1 01 	jmp	0x362	; 0x362 <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62

000000ac <__do_copy_data>:
  ac:	e0 ea       	ldi	r30, 0xA0	; 160
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	17 c0       	rjmp	.+46     	; 0xe2 <__do_clear_bss+0x8>
  b4:	b5 91       	lpm	r27, Z+
  b6:	a5 91       	lpm	r26, Z+
  b8:	35 91       	lpm	r19, Z+
  ba:	25 91       	lpm	r18, Z+
  bc:	05 91       	lpm	r16, Z+
  be:	07 fd       	sbrc	r16, 7
  c0:	0c c0       	rjmp	.+24     	; 0xda <__do_clear_bss>
  c2:	95 91       	lpm	r25, Z+
  c4:	85 91       	lpm	r24, Z+
  c6:	ef 01       	movw	r28, r30
  c8:	f9 2f       	mov	r31, r25
  ca:	e8 2f       	mov	r30, r24
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 17       	cp	r26, r18
  d2:	b3 07       	cpc	r27, r19
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0x20>
  d6:	fe 01       	movw	r30, r28
  d8:	04 c0       	rjmp	.+8      	; 0xe2 <__do_clear_bss+0x8>

000000da <__do_clear_bss>:
  da:	1d 92       	st	X+, r1
  dc:	a2 17       	cp	r26, r18
  de:	b3 07       	cpc	r27, r19
  e0:	e1 f7       	brne	.-8      	; 0xda <__do_clear_bss>
  e2:	e0 3a       	cpi	r30, 0xA0	; 160
  e4:	f4 07       	cpc	r31, r20
  e6:	31 f7       	brne	.-52     	; 0xb4 <__do_copy_data+0x8>
  e8:	0e 94 ae 01 	call	0x35c	; 0x35c <main>
  ec:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <exit>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>

Disassembly of section .text:

00000362 <__bad_interrupt>:
 362:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.atmel_start_init:

00000356 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
 356:	0e 94 7a 00 	call	0xf4	; 0xf4 <__data_load_end>
 35a:	08 95       	ret

Disassembly of section .text.main:

0000035c <main>:
#include <atmel_start.h>

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 35c:	0e 94 ab 01 	call	0x356	; 0x356 <atmel_start_init>
 360:	ff cf       	rjmp	.-2      	; 0x360 <main+0x4>

Disassembly of section .text.BOD_init:

00000366 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	08 95       	ret

Disassembly of section .text.CLKCTRL_init:

0000036a <CLKCTRL_init>:
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	08 95       	ret

Disassembly of section .text.CPUINT_init:

0000036e <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	08 95       	ret

Disassembly of section .text.mcu_init:

000001b6 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	08 c0       	rjmp	.+16     	; 0x1ca <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 1ba:	e8 2f       	mov	r30, r24
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	e0 5f       	subi	r30, 0xF0	; 240
 1c0:	fb 4f       	sbci	r31, 0xFB	; 251
 1c2:	90 81       	ld	r25, Z
 1c4:	98 60       	ori	r25, 0x08	; 8
 1c6:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 1c8:	8f 5f       	subi	r24, 0xFF	; 255
 1ca:	88 30       	cpi	r24, 0x08	; 8
 1cc:	b0 f3       	brcs	.-20     	; 0x1ba <mcu_init+0x4>
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	08 c0       	rjmp	.+16     	; 0x1e2 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 1d2:	e8 2f       	mov	r30, r24
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	e0 5d       	subi	r30, 0xD0	; 208
 1d8:	fb 4f       	sbci	r31, 0xFB	; 251
 1da:	90 81       	ld	r25, Z
 1dc:	98 60       	ori	r25, 0x08	; 8
 1de:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 1e0:	8f 5f       	subi	r24, 0xFF	; 255
 1e2:	88 30       	cpi	r24, 0x08	; 8
 1e4:	b0 f3       	brcs	.-20     	; 0x1d2 <mcu_init+0x1c>
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	08 c0       	rjmp	.+16     	; 0x1fa <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 1ea:	e8 2f       	mov	r30, r24
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	e0 5b       	subi	r30, 0xB0	; 176
 1f0:	fb 4f       	sbci	r31, 0xFB	; 251
 1f2:	90 81       	ld	r25, Z
 1f4:	98 60       	ori	r25, 0x08	; 8
 1f6:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 1f8:	8f 5f       	subi	r24, 0xFF	; 255
 1fa:	88 30       	cpi	r24, 0x08	; 8
 1fc:	b0 f3       	brcs	.-20     	; 0x1ea <mcu_init+0x34>
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	08 c0       	rjmp	.+16     	; 0x212 <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 202:	e8 2f       	mov	r30, r24
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	e0 59       	subi	r30, 0x90	; 144
 208:	fb 4f       	sbci	r31, 0xFB	; 251
 20a:	90 81       	ld	r25, Z
 20c:	98 60       	ori	r25, 0x08	; 8
 20e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 210:	8f 5f       	subi	r24, 0xFF	; 255
 212:	88 30       	cpi	r24, 0x08	; 8
 214:	b0 f3       	brcs	.-20     	; 0x202 <mcu_init+0x4c>
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	08 c0       	rjmp	.+16     	; 0x22a <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 21a:	e8 2f       	mov	r30, r24
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	e0 57       	subi	r30, 0x70	; 112
 220:	fb 4f       	sbci	r31, 0xFB	; 251
 222:	90 81       	ld	r25, Z
 224:	98 60       	ori	r25, 0x08	; 8
 226:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 228:	8f 5f       	subi	r24, 0xFF	; 255
 22a:	88 30       	cpi	r24, 0x08	; 8
 22c:	b0 f3       	brcs	.-20     	; 0x21a <mcu_init+0x64>
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	08 c0       	rjmp	.+16     	; 0x242 <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 232:	e8 2f       	mov	r30, r24
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	e0 55       	subi	r30, 0x50	; 80
 238:	fb 4f       	sbci	r31, 0xFB	; 251
 23a:	90 81       	ld	r25, Z
 23c:	98 60       	ori	r25, 0x08	; 8
 23e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 240:	8f 5f       	subi	r24, 0xFF	; 255
 242:	88 30       	cpi	r24, 0x08	; 8
 244:	b0 f3       	brcs	.-20     	; 0x232 <mcu_init+0x7c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 246:	08 95       	ret

Disassembly of section .text.USART_SCRN_initialization:

00000248 <USART_SCRN_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 248:	80 b1       	in	r24, 0x00	; 0
 24a:	8f 7d       	andi	r24, 0xDF	; 223
 24c:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 24e:	e5 e1       	ldi	r30, 0x15	; 21
 250:	f4 e0       	ldi	r31, 0x04	; 4
 252:	80 81       	ld	r24, Z
 254:	87 7f       	andi	r24, 0xF7	; 247
 256:	80 83       	st	Z, r24
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	/* set the alternate pin mux */

	PORTMUX.USARTROUTEA |= PORTMUX_USART00_bm;
 258:	e0 ee       	ldi	r30, 0xE0	; 224
 25a:	f5 e0       	ldi	r31, 0x05	; 5
 25c:	82 81       	ldd	r24, Z+2	; 0x02
 25e:	81 60       	ori	r24, 0x01	; 1
 260:	82 83       	std	Z+2, r24	; 0x02
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 262:	81 b1       	in	r24, 0x01	; 1
 264:	8f 7e       	andi	r24, 0xEF	; 239
 266:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 268:	80 b1       	in	r24, 0x00	; 0
 26a:	80 61       	ori	r24, 0x10	; 16
 26c:	80 b9       	out	0x00, r24	; 0

	RX_SCRN_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */

	PORTMUX.USARTROUTEA |= PORTMUX_USART00_bm;
 26e:	82 81       	ldd	r24, Z+2	; 0x02
 270:	81 60       	ori	r24, 0x01	; 1
 272:	82 83       	std	Z+2, r24	; 0x02

	USART_SCRN_init();
 274:	0e 94 83 01 	call	0x306	; 0x306 <USART_SCRN_init>
 278:	08 95       	ret

Disassembly of section .text.USART_WIFI_initialization:

000002ac <USART_WIFI_initialization>:
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
 2ac:	88 b1       	in	r24, 0x08	; 8
 2ae:	8d 7f       	andi	r24, 0xFD	; 253
 2b0:	88 b9       	out	0x08, r24	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 2b2:	e1 e5       	ldi	r30, 0x51	; 81
 2b4:	f4 e0       	ldi	r31, 0x04	; 4
 2b6:	80 81       	ld	r24, Z
 2b8:	87 7f       	andi	r24, 0xF7	; 247
 2ba:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 2bc:	89 b1       	in	r24, 0x09	; 9
 2be:	8e 7f       	andi	r24, 0xFE	; 254
 2c0:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 2c2:	88 b1       	in	r24, 0x08	; 8
 2c4:	81 60       	ori	r24, 0x01	; 1
 2c6:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    false);

	RX_WIFI_set_dir(PORT_DIR_OUT);

	USART_WIFI_init();
 2c8:	0e 94 8d 01 	call	0x31a	; 0x31a <USART_WIFI_init>
 2cc:	08 95       	ret

Disassembly of section .text.USART_TEMP_initialization:

000002ce <USART_TEMP_initialization>:
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
 2ce:	84 b3       	in	r24, 0x14	; 20
 2d0:	8d 7f       	andi	r24, 0xFD	; 253
 2d2:	84 bb       	out	0x14, r24	; 20
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 2d4:	e1 eb       	ldi	r30, 0xB1	; 177
 2d6:	f4 e0       	ldi	r31, 0x04	; 4
 2d8:	80 81       	ld	r24, Z
 2da:	87 7f       	andi	r24, 0xF7	; 247
 2dc:	80 83       	st	Z, r24
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
 2de:	85 b3       	in	r24, 0x15	; 21
 2e0:	8e 7f       	andi	r24, 0xFE	; 254
 2e2:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
 2e4:	84 b3       	in	r24, 0x14	; 20
 2e6:	81 60       	ori	r24, 0x01	; 1
 2e8:	84 bb       	out	0x14, r24	; 20
	    // <true"> High
	    false);

	AUX1_set_dir(PORT_DIR_OUT);

	USART_TEMP_init();
 2ea:	0e 94 97 01 	call	0x32e	; 0x32e <USART_TEMP_init>
 2ee:	08 95       	ret

Disassembly of section .text.USART_3_initialization:

0000027a <USART_3_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
 27a:	84 b1       	in	r24, 0x04	; 4
 27c:	8f 7d       	andi	r24, 0xDF	; 223
 27e:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 280:	e5 e3       	ldi	r30, 0x35	; 53
 282:	f4 e0       	ldi	r31, 0x04	; 4
 284:	80 81       	ld	r24, Z
 286:	87 7f       	andi	r24, 0xF7	; 247
 288:	80 83       	st	Z, r24
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	/* set the alternate pin mux */

	PORTMUX.USARTROUTEA |= PORTMUX_USART30_bm;
 28a:	e0 ee       	ldi	r30, 0xE0	; 224
 28c:	f5 e0       	ldi	r31, 0x05	; 5
 28e:	82 81       	ldd	r24, Z+2	; 0x02
 290:	80 64       	ori	r24, 0x40	; 64
 292:	82 83       	std	Z+2, r24	; 0x02
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 294:	85 b1       	in	r24, 0x05	; 5
 296:	8f 7e       	andi	r24, 0xEF	; 239
 298:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 29a:	84 b1       	in	r24, 0x04	; 4
 29c:	80 61       	ori	r24, 0x10	; 16
 29e:	84 b9       	out	0x04, r24	; 4

	TX0_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */

	PORTMUX.USARTROUTEA |= PORTMUX_USART30_bm;
 2a0:	82 81       	ldd	r24, Z+2	; 0x02
 2a2:	80 64       	ori	r24, 0x40	; 64
 2a4:	82 83       	std	Z+2, r24	; 0x02

	USART_3_init();
 2a6:	0e 94 a1 01 	call	0x342	; 0x342 <USART_3_init>
 2aa:	08 95       	ret

Disassembly of section .text.system_init:

000000f4 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
  f4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <mcu_init>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
  f8:	89 b1       	in	r24, 0x09	; 9
  fa:	8f 7e       	andi	r24, 0xEF	; 239
  fc:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
  fe:	88 b1       	in	r24, 0x08	; 8
 100:	80 61       	ori	r24, 0x10	; 16
 102:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 104:	89 b1       	in	r24, 0x09	; 9
 106:	8f 7d       	andi	r24, 0xDF	; 223
 108:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 10a:	88 b1       	in	r24, 0x08	; 8
 10c:	80 62       	ori	r24, 0x20	; 32
 10e:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 110:	89 b1       	in	r24, 0x09	; 9
 112:	8f 7b       	andi	r24, 0xBF	; 191
 114:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 116:	88 b1       	in	r24, 0x08	; 8
 118:	80 64       	ori	r24, 0x40	; 64
 11a:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 11c:	89 b1       	in	r24, 0x09	; 9
 11e:	8f 77       	andi	r24, 0x7F	; 127
 120:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 122:	88 b1       	in	r24, 0x08	; 8
 124:	80 68       	ori	r24, 0x80	; 128
 126:	88 b9       	out	0x08, r24	; 8
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 128:	8d b1       	in	r24, 0x0d	; 13
 12a:	8e 7f       	andi	r24, 0xFE	; 254
 12c:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 12e:	8c b1       	in	r24, 0x0c	; 12
 130:	81 60       	ori	r24, 0x01	; 1
 132:	8c b9       	out	0x0c, r24	; 12
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 134:	8d b1       	in	r24, 0x0d	; 13
 136:	8d 7f       	andi	r24, 0xFD	; 253
 138:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 13a:	8c b1       	in	r24, 0x0c	; 12
 13c:	82 60       	ori	r24, 0x02	; 2
 13e:	8c b9       	out	0x0c, r24	; 12
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 140:	8d b1       	in	r24, 0x0d	; 13
 142:	8b 7f       	andi	r24, 0xFB	; 251
 144:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 146:	8c b1       	in	r24, 0x0c	; 12
 148:	84 60       	ori	r24, 0x04	; 4
 14a:	8c b9       	out	0x0c, r24	; 12
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 14c:	8d b1       	in	r24, 0x0d	; 13
 14e:	87 7f       	andi	r24, 0xF7	; 247
 150:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 152:	8c b1       	in	r24, 0x0c	; 12
 154:	88 60       	ori	r24, 0x08	; 8
 156:	8c b9       	out	0x0c, r24	; 12
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
 158:	81 b3       	in	r24, 0x11	; 17
 15a:	87 7f       	andi	r24, 0xF7	; 247
 15c:	81 bb       	out	0x11, r24	; 17
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
 15e:	80 b3       	in	r24, 0x10	; 16
 160:	88 60       	ori	r24, 0x08	; 8
 162:	80 bb       	out	0x10, r24	; 16
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
 164:	85 b3       	in	r24, 0x15	; 21
 166:	8f 7e       	andi	r24, 0xEF	; 239
 168:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
 16a:	84 b3       	in	r24, 0x14	; 20
 16c:	80 61       	ori	r24, 0x10	; 16
 16e:	84 bb       	out	0x14, r24	; 20
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
 170:	85 b3       	in	r24, 0x15	; 21
 172:	8f 7d       	andi	r24, 0xDF	; 223
 174:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
 176:	84 b3       	in	r24, 0x14	; 20
 178:	80 62       	ori	r24, 0x20	; 32
 17a:	84 bb       	out	0x14, r24	; 20
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
 17c:	84 b3       	in	r24, 0x14	; 20
 17e:	8f 7b       	andi	r24, 0xBF	; 191
 180:	84 bb       	out	0x14, r24	; 20
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 182:	e6 eb       	ldi	r30, 0xB6	; 182
 184:	f4 e0       	ldi	r31, 0x04	; 4
 186:	80 81       	ld	r24, Z
 188:	87 7f       	andi	r24, 0xF7	; 247
 18a:	80 83       	st	Z, r24
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	CLKCTRL_init();
 18c:	0e 94 b5 01 	call	0x36a	; 0x36a <CLKCTRL_init>

	VREF_0_init();
 190:	0e 94 bb 01 	call	0x376	; 0x376 <VREF_0_init>

	USART_SCRN_initialization();
 194:	0e 94 24 01 	call	0x248	; 0x248 <USART_SCRN_initialization>

	USART_WIFI_initialization();
 198:	0e 94 56 01 	call	0x2ac	; 0x2ac <USART_WIFI_initialization>

	USART_TEMP_initialization();
 19c:	0e 94 67 01 	call	0x2ce	; 0x2ce <USART_TEMP_initialization>

	USART_3_initialization();
 1a0:	0e 94 3d 01 	call	0x27a	; 0x27a <USART_3_initialization>

	WDT_0_init();
 1a4:	0e 94 bd 01 	call	0x37a	; 0x37a <WDT_0_init>

	CPUINT_init();
 1a8:	0e 94 b7 01 	call	0x36e	; 0x36e <CPUINT_init>

	SLPCTRL_init();
 1ac:	0e 94 b9 01 	call	0x372	; 0x372 <SLPCTRL_init>

	BOD_init();
 1b0:	0e 94 b3 01 	call	0x366	; 0x366 <BOD_init>
 1b4:	08 95       	ret

Disassembly of section .text.SLPCTRL_init:

00000372 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	08 95       	ret

Disassembly of section .text.USART_SCRN_init:

00000306 <USART_SCRN_init>:
 */
void USART_TEMP_write(const uint8_t data)
{
	while (!(USART2.STATUS & USART_DREIF_bm))
		;
	USART2.TXDATAL = data;
 306:	e0 e0       	ldi	r30, 0x00	; 0
 308:	f8 e0       	ldi	r31, 0x08	; 8
 30a:	8d e6       	ldi	r24, 0x6D	; 109
 30c:	95 e0       	ldi	r25, 0x05	; 5
 30e:	80 87       	std	Z+8, r24	; 0x08
 310:	91 87       	std	Z+9, r25	; 0x09
 312:	80 ec       	ldi	r24, 0xC0	; 192
 314:	86 83       	std	Z+6, r24	; 0x06
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	08 95       	ret

Disassembly of section .text.USART_WIFI_init:

0000031a <USART_WIFI_init>:
 31a:	e0 e2       	ldi	r30, 0x20	; 32
 31c:	f8 e0       	ldi	r31, 0x08	; 8
 31e:	8d e6       	ldi	r24, 0x6D	; 109
 320:	95 e0       	ldi	r25, 0x05	; 5
 322:	80 87       	std	Z+8, r24	; 0x08
 324:	91 87       	std	Z+9, r25	; 0x09
 326:	80 ec       	ldi	r24, 0xC0	; 192
 328:	86 83       	std	Z+6, r24	; 0x06
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	08 95       	ret

Disassembly of section .text.USART_TEMP_init:

0000032e <USART_TEMP_init>:
 32e:	e0 e4       	ldi	r30, 0x40	; 64
 330:	f8 e0       	ldi	r31, 0x08	; 8
 332:	8d e6       	ldi	r24, 0x6D	; 109
 334:	95 e0       	ldi	r25, 0x05	; 5
 336:	80 87       	std	Z+8, r24	; 0x08
 338:	91 87       	std	Z+9, r25	; 0x09
 33a:	80 ec       	ldi	r24, 0xC0	; 192
 33c:	86 83       	std	Z+6, r24	; 0x06
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	08 95       	ret

Disassembly of section .text.USART_3_init:

00000342 <USART_3_init>:
 * \retval 1 the USART init was not successful
 */
int8_t USART_3_init()
{

	USART3.BAUD = (uint16_t)USART3_BAUD_RATE(9600); /* set baud rate register */
 342:	e0 e6       	ldi	r30, 0x60	; 96
 344:	f8 e0       	ldi	r31, 0x08	; 8
 346:	8d e6       	ldi	r24, 0x6D	; 109
 348:	95 e0       	ldi	r25, 0x05	; 5
 34a:	80 87       	std	Z+8, r24	; 0x08
 34c:	91 87       	std	Z+9, r25	; 0x09
	//		 | USART_RS485_OFF_gc /* RS485 Mode disabled */
	//		 | 0 << USART_RXCIE_bp /* Receive Complete Interrupt Enable: disabled */
	//		 | 0 << USART_RXSIE_bp /* Receiver Start Frame Interrupt Enable: disabled */
	//		 | 0 << USART_TXCIE_bp; /* Transmit Complete Interrupt Enable: disabled */

	USART3.CTRLB = 0 << USART_MPCM_bp       /* Multi-processor Communication Mode: disabled */
 34e:	80 ec       	ldi	r24, 0xC0	; 192
 350:	86 83       	std	Z+6, r24	; 0x06
	// USART3.RXPLCTRL = 0x0 << USART_RXPL_gp; /* Receiver Pulse Length: 0x0 */

	// USART3.TXPLCTRL = 0x0 << USART_TXPL_gp; /* Transmit pulse length: 0x0 */

	return 0;
}
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	08 95       	ret

Disassembly of section .text.VREF_0_init:

00000376 <VREF_0_init>:

	// VREF_CTRLB = 0 << VREF_ADC0REFEN_bp /* ADC0 reference enable: disabled */
	//		 | 0 << VREF_AC0REFEN_bp; /* AC0 DACREF reference enable: disabled */

	return 0;
}
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	08 95       	ret

Disassembly of section .text.WDT_0_init:

0000037a <WDT_0_init>:

	// ccp_write_io((void*)&(WDT.CTRLA),WDT_PERIOD_OFF_gc /* Watch-Dog timer Off */
	//		 | WDT_WINDOW_OFF_gc /* Window mode off */);

	return 0;
}
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000382 <_fini>:
 382:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000384 <__funcs_on_exit>:
 384:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000386 <__simulator_exit>:
 386:	08 95       	ret

Disassembly of section .text.exit:

000002f0 <exit>:
 2f0:	ec 01       	movw	r28, r24
 2f2:	0e 94 c2 01 	call	0x384	; 0x384 <__funcs_on_exit>
 2f6:	0e 94 c1 01 	call	0x382	; 0x382 <_fini>
 2fa:	ce 01       	movw	r24, r28
 2fc:	0e 94 c3 01 	call	0x386	; 0x386 <__simulator_exit>
 300:	ce 01       	movw	r24, r28
 302:	0e 94 bf 01 	call	0x37e	; 0x37e <_Exit>

Disassembly of section .text._Exit:

0000037e <_Exit>:
 37e:	0e 94 78 00 	call	0xf0	; 0xf0 <_exit>
